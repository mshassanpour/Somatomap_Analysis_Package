%% Import data from text file.
% Script for importing data from the following text file:
%
%    Z:\skhalsa\Samira\Data\somatomap\Meditator\somatomap.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/04/07 11:12:19

%% Initialize variables.
filename = 'Z:\skhalsa\Samira\Data\somatomap\Meditator\somatomap.csv';
delimiter = ' ';

%% Format string for each line of text:
%   column1: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
somatomap = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;

%% Condition Data
s=0;
clear s_map id
for i =2: length(somatomap)
    foo= somatomap{i};
%     xx = length(strtok(foo,','));
    xxx = strfind(foo,'""0');
    
    if ~isempty(xxx)
        m = foo(xxx+2:xxx+1+400*344);
        length(m)
        s= s+1;
        s_map(s,:)= double(m);
        id(s) =str2double(strtok(foo,','));
    end
end
s_map(s_map == 48)= 0;
s_map(s_map == 49)= 1;
save('somatomaps.mat', 's_map' , 'id' ,'-append','-v7.3')
 %% Import data about conditions
 
 
 %  
 [NUM,TXT,RAW]=xlsread('somatomap export 2017-12-14 - ebreese_forSamira_SK.csv'); 

 Rating_ID =  RAW(1:2:end,2); Rating_ID(1)=[];Rating_ID=cell2mat(Rating_ID);

 Rating_Dose = NUM(1:2:end,15); 
 Rating_Dose_Saline = TXT(1:2:end,15); Rating_Dose_Saline(1)=[];
 
 Trial_Meditation = RAW(1:2:end,14); Trial_Meditation(1)=[];
 s_ID = RAW(1:2:end,7);
subject_ID = RAW(1:2:end,7);

for t =2: length(subject_ID)
foo {t-1} = lower(strtok(subject_ID{t},'_'));
end
subject_IDs= unique(foo)';
foo{217}= 'dwn32';
subject_IDs =foo;
subjects= unique(foo)';


M_D2 = intersect(find(cellfun(@(S) strcmp('Active Meditator',S)  , Trial_Meditation)),find(Rating_Dose==2));
NM_D2= intersect(find(cellfun(@(S) strcmp('Non-Meditator',S)  , Trial_Meditation)),find(Rating_Dose==2));

for i =1: 15
    
    xx= find(id == Rating_ID (M_D2(i)));
    S_map_M_D2(i,:) = s_map(xx,:);
    
    xx= find(id == Rating_ID (NM_D2(i)));
    S_map_NM_D2(i,:) = s_map(xx,:);
    
end
S_map_NM_D2 (S_map_NM_D2 ==48)=0;S_map_NM_D2 (S_map_NM_D2 ==49)=1;
S_map_M_D2 (S_map_M_D2 ==48)=0;S_map_M_D2 (S_map_M_D2 ==49)=1;

M_Saline = intersect(find(cellfun(@(S) strcmp('Active Meditator',S)  , Trial_Meditation)),find(isnan(Rating_Dose)));
NM_Saline = intersect(find(cellfun(@(S) strcmp('Non-Meditator',S)  , Trial_Meditation)),find(isnan(Rating_Dose)));


 
sub_ID_M_Saline = subject_IDs(M_Saline); Rating_ID_M_Saline = Rating_ID(M_Saline);
sub_ID_NM_Saline = subject_IDs(NM_Saline);Rating_ID_NM_Saline = Rating_ID(NM_Saline);

foo_M = zeros(15,size(s_map,2));
foo_NM =zeros(15,size(s_map,2));

iM=0; iNM=0;
clear S_map_M_Saline S_map_NM_Saline

s_map(s_map==49)=1;
s_map(s_map==48)=0;

for i =1: 30
    xM= Rating_ID_M_Saline(find(cellfun(@(S) strcmp(subjects{i},S)  , sub_ID_M_Saline)));
    if ~isempty (xM)
        iM = iM+1;
        [tf,loc]=ismember(xM, id)
        S_map_M_Saline (iM,:)= sum(s_map(loc,:));
    end
    
    xNM= Rating_ID_NM_Saline(find(cellfun(@(S) strcmp(subjects{i},S)  , sub_ID_NM_Saline)));
    if ~isempty (xNM)
        iNM = iNM+1;
        [tf,loc]=ismember(xNM, id)
        S_map_NM_Saline (iNM,:)= sum(s_map(loc,:));
    end
    
end

 S_map_NM_Saline(S_map_NM_Saline>0)=1;
 S_map_M_Saline(S_map_M_Saline>0)=1;
 
    
    
    
    
    
